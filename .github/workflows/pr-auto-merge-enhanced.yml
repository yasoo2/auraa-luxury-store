name: Enhanced PR Auto-Merge
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: true

jobs:
  enhanced-auto-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.ref != 'main' || github.event_name == 'workflow_dispatch'
    
    # Required permissions for auto-merge
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref || github.event.inputs.pr_number }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "emergent-automation"
          git config user.email "automation@emergent.dev"
          git config merge.ours.driver "true"

      - name: Smart Conflict Resolution
        id: merge
        run: |
          set -e
          
          echo "merge_status=pending" >> $GITHUB_OUTPUT
          
          # Fetch latest main branch
          git fetch origin main:main
          
          # Check if merge is needed
          if git merge-base --is-ancestor main HEAD; then
            echo "✅ Branch is already up-to-date with main"
            echo "merge_status=up-to-date" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Attempt smart merge with conflict resolution
          echo "🔄 Attempting merge with conflict resolution..."
          
          # Create backup branch
          BACKUP_BRANCH="backup-before-merge-$(date +%s)"
          git branch "$BACKUP_BRANCH" HEAD
          echo "backup_branch=$BACKUP_BRANCH" >> $GITHUB_OUTPUT
          
          # Merge with strategy: prefer PR changes for code, keep PR lockfiles
          if git merge main -X theirs --no-edit; then
            echo "✅ Clean merge successful"
            echo "merge_status=clean" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Conflicts detected, applying resolution rules..."
            
            # Handle lockfile conflicts - always keep PR version
            for lockfile in package-lock.json yarn.lock pnpm-lock.yaml; do
              if git ls-files -u | grep -q "$lockfile"; then
                echo "Resolving $lockfile conflict (keeping PR version)"
                git checkout --ours -- "$lockfile" 2>/dev/null || true
                git add "$lockfile" 2>/dev/null || true
              fi
            done
            
            # Handle common config file conflicts - prefer PR changes
            for config in .env .env.example package.json tsconfig.json webpack.config.js; do
              if git ls-files -u | grep -q "$config"; then
                echo "Resolving $config conflict (preferring PR changes)"
                git checkout --ours -- "$config" 2>/dev/null || true
                git add "$config" 2>/dev/null || true
              fi
            done
            
            # Check for remaining conflicts
            if git ls-files -u | grep -q .; then
              echo "❌ Manual conflicts still remain:"
              git ls-files -u
              git status
              echo "merge_status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Complete the merge
            git commit -m "chore: auto-resolve merge conflicts with main
            
            - Preserved PR lockfiles (package-lock.json, yarn.lock, pnpm-lock.yaml)
            - Applied PR-first strategy for configuration files
            - Auto-resolved by emergent-automation bot"
            
            echo "merge_status=resolved" >> $GITHUB_OUTPUT
          fi
          
          # Push resolved changes
          git push origin HEAD

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      - name: Install & Build Frontend
        id: frontend-build
        if: hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          # Install with legacy peer deps to handle dependency conflicts
          npm ci --legacy-peer-deps --prefer-offline
          
          # Build with error handling
          npm run build 2>&1 | tee build.log
          
          # Check build success
          if [ ! -d "build" ]; then
            echo "❌ Frontend build failed"
            cat build.log
            echo "build_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Frontend build successful"
          echo "build_status=success" >> $GITHUB_OUTPUT

      - name: Install & Test Backend  
        id: backend-build
        if: hashFiles('backend/package.json') != ''
        working-directory: backend
        run: |
          # Install dependencies
          npm ci --legacy-peer-deps --prefer-offline || npm install --legacy-peer-deps
          
          # Run tests if available
          if npm run test --if-present; then
            echo "✅ Backend tests passed"
            echo "test_status=passed" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Backend tests failed or not available"
            echo "test_status=warning" >> $GITHUB_OUTPUT
          fi
          
          # Build if script exists
          if npm run build --if-present; then
            echo "✅ Backend build successful"
            echo "build_status=success" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No backend build script found"
            echo "build_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Quality Checks
        id: quality
        run: |
          # Check for sensitive information
          echo "🔍 Checking for sensitive data..."
          if grep -r -i "password\|secret\|key" --include="*.js" --include="*.ts" --include="*.json" . | grep -v node_modules | grep -v ".git" | grep -E "(password|secret|key)\s*[:=]\s*['\"][^'\"]{8,}"; then
            echo "⚠️ Potential sensitive data found in code"
            echo "security_status=warning" >> $GITHUB_OUTPUT
          else
            echo "✅ No obvious sensitive data found"
            echo "security_status=clean" >> $GITHUB_OUTPUT
          fi
          
          # Check for large files
          echo "📁 Checking for large files..."
          LARGE_FILES=$(find . -type f -size +10M -not -path "./node_modules/*" -not -path "./.git/*" | head -10)
          if [ -n "$LARGE_FILES" ]; then
            echo "⚠️ Large files found:"
            echo "$LARGE_FILES"
          fi
          
          # Check package vulnerabilities (if possible)
          cd frontend && (npm audit --audit-level=high || echo "⚠️ Vulnerabilities found in frontend") && cd ..
          cd backend && (npm audit --audit-level=high || echo "⚠️ Vulnerabilities found in backend") && cd ..

      - name: Create PR Summary
        if: always()
        run: |
          echo "# 🤖 Auto-Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Merge Status
          echo "## 🔄 Merge Status" >> $GITHUB_STEP_SUMMARY
          case "${{ steps.merge.outputs.merge_status }}" in
            "up-to-date")
              echo "✅ Branch already up-to-date with main" >> $GITHUB_STEP_SUMMARY
              ;;
            "clean")
              echo "✅ Clean merge with main" >> $GITHUB_STEP_SUMMARY
              ;;
            "resolved")
              echo "✅ Conflicts auto-resolved" >> $GITHUB_STEP_SUMMARY
              ;;
            "failed")
              echo "❌ Merge conflicts require manual resolution" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "⏳ Merge in progress..." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Status
          echo "## 🔨 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** ${{ steps.frontend-build.outputs.build_status || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend:** ${{ steps.backend-build.outputs.build_status || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality Status
          echo "## 🔍 Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** ${{ steps.quality.outputs.security_status || 'pending' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # PR Information
          echo "## 📦 PR Information" >> $GITHUB_STEP_SUMMARY
          echo "- **PR #:** ${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Next Steps
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Auto-merge will be enabled" >> $GITHUB_STEP_SUMMARY
            echo "- PR will be merged automatically when ready" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Action Required" >> $GITHUB_STEP_SUMMARY
            echo "- Review the errors above" >> $GITHUB_STEP_SUMMARY
            echo "- Fix issues and push updates" >> $GITHUB_STEP_SUMMARY
            echo "- Or merge manually after review" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Auto-approve if all checks pass
        if: success()
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Auto-merge
        if: success()
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

      - name: Add Success Label
        if: success()
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            ✅ auto-merge-ready
            🤖 bot-processed

      - name: Handle Failure
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Auto-merge process failed"
          echo "📦 PR #${{ github.event.pull_request.number }}"
          echo "🔧 Review required"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Add Failure Labels
        if: failure()
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            ❌ auto-merge-failed
            🔧 needs-manual-review

      - name: Cleanup on Failure
        if: failure() && steps.merge.outputs.backup_branch
        run: |
          # Restore to backup if merge was attempted
          BACKUP_BRANCH="${{ steps.merge.outputs.backup_branch }}"
          if [ -n "$BACKUP_BRANCH" ] && git branch | grep -q "$BACKUP_BRANCH"; then
            echo "🔄 Restoring from backup due to failure..."
            git reset --hard "$BACKUP_BRANCH"
            git push origin HEAD --force-with-lease
          fi